class Model(nn.Module):
    def __init__(self, n_input_features):
        super(Model,self).__init__()
        self.linear = nn.Linear(n_input_features,1)
        
    def forward(self,x):
        x=torch.sigmoid(self.linear(x))
        return x
    
model= Model(n_input_features=6)


class Model(nn.Module):
    def __init__(self, n_input_features):
        super(Model,self).__init__()
        self.linear = nn.Linear(n_input_features,1)
    def forward(self, x):
        x=torch.sigmoid(self.linear(x))
        return x

model = Model(n_input_features=6)

################## Save and load Entire model   #####################
'''
Save Model
'''
#path = '/home/mega/data2/model.pth'
path = 'model.pth'
torch.save(model,path)

'''
Load Model
'''
loaded_model=torch.load(path)
loaded_model.eval()


################## Save and load State_dict()   #####################
'''
Save Model
'''
#path = '/home/mega/data2/model.pth'
path = 'model1.pth'
torch.save(model.state_dict(),path)

'''
Load Model
'''
loaded_model1 = Model(n_input_features=6)
loaded_model1.load_state_dict(torch.load(path))
loaded_model1.eval()


#################   Save and load Checkpoints  ######################
loaded_model2 = Model(n_input_features=6)
lr_rate = 0.01
optimizer = torch.optim.SGD(loaded_model2.parameters(),lr=lr_rate)

checkpoint= {
    'epoch':90,
    'model_state':model.state_dict(),
    'optimizer_state': optimizer.state_dict()
}

'''
Save Model
'''
#path = '/home/mega/data2/model.pth'
path = 'model3.pth'
torch.save(checkpoint,path)

'''
Load Model
'''
checkpoint = torch.load(path)
model.load_state_dict(checkpoint['model_state'])
optimizer.load_state_dict(checkpoint['optimizer_state'])
model.eval()

print(optimizer.state_dict())
